package entity;

// Start of user code for imports
import java.util.*;
import org.minueto.image.MinuetoImage;
// End of user code

/**
 * UndirectedAnimation class definition.
 * Generated by the TouchCORE code generator.
 */
public class UndirectedAnimation extends Animation {
    
    protected ArrayList<MinuetoImage> frames;
    
    public UndirectedAnimation(MinuetoImage[] f, int speed) {
        this.speed = speed;
        this.index = 0;
        this.frames = new ArrayList<MinuetoImage>();
        this.playing = false;
        this.timesPlayed = 0;
        for (int i = 0; i < f.length;  i ++) {
            MinuetoImage toBeAdded = f[i];
            boolean addFrame = addFrame(toBeAdded);
        }
    }

    private boolean addFrame(MinuetoImage i) {
        if (frames.size() == 16) {
            return false;
        }
        boolean added = frames.add(i);
        return added;
    }

    public void update() {
    	if (playing) {
            this.timer = this.timer + 1;
            if (timer >= speed) {
                this.index = index + 1;
                this.timer = 0;
                if (index == sizeOfFrames() - 1) {
                    this.timesPlayed++;
                }
                if (index >= sizeOfFrames()) {;
                    this.index = 0;
                }
            }
    	}
    }

    public MinuetoImage getCurrentFrame() {
        MinuetoImage frameAt = frames.get(this.index);
        return frameAt;
    }

    public int getIndex() {
        return this.index;
    }

    boolean addFramesAt(int index, MinuetoImage a) {
        frames.add(index, a);
        return true;
    }

    boolean removeFramesAt(int index) {
        int size = frames.size();
        if (size == 0) {
            return false;
        }
        MinuetoImage removedElement = frames.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    MinuetoImage getFramesAt(int index) {
        MinuetoImage associated = frames.get(index);
        return associated;
    }

    boolean removeFrames(MinuetoImage a) {
        int size = frames.size();
        if (size == 0) {
            return false;
        }
        boolean removed = frames.remove(a);
        return removed;
    }

    boolean addFrames(MinuetoImage a) {
        boolean added = frames.add(a);
        return added;
    }

    boolean containsFrames(MinuetoImage a) {
        boolean contains = frames.contains(a);
        return contains;
    }

    int sizeOfFrames() {
        int size = frames.size();
        return size;
    }

    ArrayList<MinuetoImage> getFrames() {
        return this.frames;
    }
}
