package entity;

// Start of user code for imports
import java.util.*;
import org.minueto.image.MinuetoImage;
// End of user code

/**
 * UndirectedAnimation class definition.
 * Generated by the TouchCORE code generator.
 */
public class UndirectedAnimation extends Animation {
    
    protected int index;
    protected int delay;
    protected int timesPlayed;
    protected long timer;
    protected int speed;
    protected long lastTime;
    protected ArrayList<MinuetoImage> frames;
    
    public UndirectedAnimation(MinuetoImage[] f) {
        this.speed = 100;
        this.index = 0;
        this.lastTime = System.currentTimeMillis();
        this.frames = new ArrayList<MinuetoImage>();
        for (int i = 0; i < f.length;  i ++) {
            MinuetoImage toBeAdded = f[i];
            boolean addFrame = addFrame(toBeAdded);
        }
    }

    private boolean addFrame(MinuetoImage i) {
        if (frames.size() == 16) {
            return false;
        }
        boolean added = frames.add(i);
        return added;
    }

    public void update() {
        this.timer = timer+System.currentTimeMillis()-lastTime;
        this.lastTime = System.currentTimeMillis();
        if (timer > speed) {
            this.index = index + 1;
            this.timer = 0;
            if (index >= sizeOfFrames()) {
                this.index = 0;
            }
        }
    }

    public MinuetoImage getCurrentFrame() {
        MinuetoImage frameAt = frames.get(this.index);
        return frameAt;
    }

    public int getIndex() {
        return this.index;
    }

    boolean addFramesAt(int index, MinuetoImage a) {
        frames.add(index, a);
        return true;
    }

    boolean removeFramesAt(int index) {
        int size = frames.size();
        if (size == 0) {
            return false;
        }
        MinuetoImage removedElement = frames.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    MinuetoImage getFramesAt(int index) {
        MinuetoImage associated = frames.get(index);
        return associated;
    }

    boolean removeFrames(MinuetoImage a) {
        int size = frames.size();
        if (size == 0) {
            return false;
        }
        boolean removed = frames.remove(a);
        return removed;
    }

    boolean addFrames(MinuetoImage a) {
        boolean added = frames.add(a);
        return added;
    }

    UndirectedAnimation() {
        ArrayList<MinuetoImage> collection = new ArrayList<MinuetoImage>();
    }

    boolean containsFrames(MinuetoImage a) {
        boolean contains = frames.contains(a);
        return contains;
    }

    int sizeOfFrames() {
        int size = frames.size();
        return size;
    }

    ArrayList<MinuetoImage> getFrames() {
        return this.frames;
    }
}
