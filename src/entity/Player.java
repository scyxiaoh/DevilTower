package entity;

// Start of user code for imports
import java.util.*;
import org.minueto.window.MinuetoWindow;
// End of user code

/**
 * Player class definition.
 * Generated by the TouchCORE code generator.
 */
public class Player extends DirectionedEntity {
    
    protected int score;
    protected int health;
    protected int attackDamage;
    protected int defence;
    protected int level;
    protected int experience;
    protected String name;
    protected Weapon myWeapon;
    protected Armor myArmor;
    
    public Player(Direction d, DirectedAnimation a, String n) {
    	super(d,a);
        this.name = n;
        this.level = 1;
        this.experience = 0;
        this.attackDamage = 10;
        this.defence = 10;
        this.health = 100;
        this.score = 0;
    }

    Weapon getMyWeapon() {
        return this.myWeapon;
    }

    boolean setMyWeapon(Weapon newObject) {
        this.myWeapon = newObject;
        return true;
    }

    Armor getMyArmor() {
        return this.myArmor;
    }

    boolean setMyArmor(Armor newObject) {
        this.myArmor = newObject;
        return true;
    }

    public boolean equipWeapon(Weapon w) {
        if (myWeapon == null) {
            this.myWeapon = w;
            int damage = myWeapon.getDamage();
            this.attackDamage = attackDamage + damage;
            return true;
        }
        return false;
    }

    public boolean removeWeapon() {
        if (myWeapon!=null) {
            int weaponDamage = myWeapon.getDamage();
            this.attackDamage = attackDamage - weaponDamage;
            this.myWeapon = null;
            return true;
        }
        return false;
    }

    public boolean equipArmor(Armor a) {
        if (myArmor == null) {
            this.myArmor = a;
            int armor = myArmor.getDefence();
            this.defence = defence + armor;
            return true;
        }
        return false;
    }

    public boolean removeArmor() {
        if (myArmor!=null) {
            int armor = myArmor.getDefence();
            this.defence = defence - armor;
            this.myArmor = null;
            return true;
        }
        return false;
    }

    public int getSpeed() {
        if (myWeapon == null) {
            return 1;
        }
        int attackSpeed = myWeapon.getAttackSpeed();
        return attackSpeed;
    }

    public boolean getAttacked(int damage) {
        int realDamage = damage - defence;
        if (realDamage > 0) {
            this.health = health - realDamage;
        }
        if (health <= 0) {
            return false;
        }
        return true;
    }

    public int getDamage() {
        return this.attackDamage;
    }

    public void encounter(Entity e) {
        /* TODO: No message view defined */
    }
    
    @Override
    public void move(Direction d) {
    	System.out.println(moving);
    	if (!moving) {
    		this.direction = d;
    		if (nextPositionAvailable()) {
    			moving = true;
    	        if(d == Direction.North) {
    	        	this.setDest(this.getDestX(), this.getDestY()-32);
    	        	this.levelMap.setCamDest(this.levelMap.getCamX(), this.levelMap.getCamY()-32);
    	        }
    	        else if (d == Direction.South) {
    	        	this.setDest(this.getDestX(), this.getDestY()+32);
    	        	this.levelMap.setCamDest(this.levelMap.getCamX(), this.levelMap.getCamY()+32);
    	        }
    	        else if (d == Direction.East) {
    	        	this.setDest(this.getDestX()+32, this.getDestY());
    	        	this.levelMap.setCamDest(this.levelMap.getCamX()+32, this.levelMap.getCamY());
    	        }
    	        else if (d == Direction.West) {
    	        	this.setDest(this.getDestX()-32, this.getDestY());
    	        	this.levelMap.setCamDest(this.levelMap.getCamX()-32, this.levelMap.getCamY());
    	        }
    		}
    	}
    }
    
    public int getHealth(){
    	return this.health;
    }
    
    public int getDefence(){
    	return this.defence;
    }
    
    public int getExp(){
    	return this.experience;
    }
    
    public int getLvl(){
    	return this.level;
    }
    
}
