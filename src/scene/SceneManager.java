package scene;

// Start of user code for imports
import java.util.*;
import org.minueto.window.MinuetoWindow;
// End of user code

/**
 * SceneManager class definition.
 * Generated by the TouchCORE code generator.
 */
public class SceneManager {
    
    protected boolean isPaused;
    protected PauseScene pauseScene;
    protected Scene currentScene;
    protected Scene previousScene;
    protected static SceneManager instance;
    protected ArrayList<Scene> scenes;
    
    private SceneManager() {
    	scenes = new ArrayList<Scene>();
        TitleScene titleScene = new TitleScene();
        titleScene.init();
        PauseScene pauseScene = new PauseScene();
        setCurrentScene(titleScene);
        addScenes(titleScene);
    }

    public void update() {
        if (isPaused()) {
        	if (pauseScene == null)
        		pauseScene = new PauseScene();
            pauseScene.update();
        } else if (currentScene != null) {
            currentScene.update();
        }
    }

    public void draw(MinuetoWindow w) {
        if (isPaused()) {
        	if (pauseScene == null)
        		pauseScene = new PauseScene();
            pauseScene.draw(w);
        } else if (currentScene != null) {
            currentScene.draw(w);
        }
    }

    PauseScene getPauseScene() {
        return this.pauseScene;
    }

    boolean setPauseScene(PauseScene newObject) {
        this.pauseScene = newObject;
        return true;
    }

    Scene getCurrentScene() {
        return this.currentScene;
    }

    boolean setCurrentScene(Scene newObject) {
        this.currentScene = newObject;
        return true;
    }

    Scene getPreviousScene() {
        return this.previousScene;
    }

    boolean setPreviousScene(Scene newObject) {
        this.previousScene = newObject;
        return true;
    }

    boolean addScenesAt(int index, Scene a) {
        boolean contains = scenes.contains(a);
        if (contains) {
            return false;
        }
        scenes.add(index, a);
        return true;
    }

    boolean removeScenesAt(int index) {
        Scene removedElement = scenes.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    Scene getScenesAt(int index) {
        Scene associated = scenes.get(index);
        return associated;
    }

    boolean addScenes(Scene a) {
        boolean contains = scenes.contains(a);
        if (contains) {
            return false;
        }
        boolean added = scenes.add(a);
        return added;
    }

    boolean removeScenes(Scene a) {
        boolean removed = scenes.remove(a);
        return removed;
    }


    boolean containsScenes(Scene a) {
        boolean contains = scenes.contains(a);
        return contains;
    }

    int sizeOfScenes() {
        int size = scenes.size();
        return size;
    }

    ArrayList<Scene> getScenes() {
        return this.scenes;
    }

    public void setScene(Scene newScene) {
        setPreviousScene(this.currentScene);
        setCurrentScene(newScene);
        currentScene.init();
    }

    public static SceneManager getInstance() {
        if (instance == null) {
            SceneManager.instance = new SceneManager();
        }
        return SceneManager.instance;
    }

    public void setPaused(boolean set) {
        this.isPaused = set;
    }

    public boolean isPaused() {
        return isPaused;
    }
}
