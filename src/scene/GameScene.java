package scene;

// Start of user code for imports
import java.util.*;
import org.minueto.window.MinuetoWindow;
// End of user code

import entity.Dialogue;
import entity.Player;
import interactive.KeyboardHandler;
import interactive.Keys;
import map.LevelMap;

/**
 * GameScene class definition.
 * Generated by the TouchCORE code generator.
 */
public class GameScene extends Scene {
    
    protected int cameraX;
    protected int cameraY;
    protected boolean eventStart;
    protected boolean eventEnd;
    protected int eventTick;
    protected int currentLevel;
    protected boolean blockInput;
    protected Player player;
    protected LevelMap currentLevelMap;
    protected ArrayList<Dialogue> dialogueQueue;
    protected ArrayList<LevelMap> levels;
    
    public GameScene() {
        /* TODO: No message view defined */
    }

    public void update() {
        handleInput();
        currentLevel.update();
        player.update();
    }

    public void init() {
        constructLevels();
    }

    public void draw(MinuetoWindow w) {
        currentLevel.draw(w);
        player.draw(w);
    }

    public void handleInput() {
        if (KeyboardHandler.isPressed(Keys.E)) {
            SceneManager sM = SceneManager.getInstance();
            sM.setPaused(true);
        }
        if (KeyboardHandler.isDown(Keys.UP)) {
            player.move();
        }
        if (KeyboardHandler.isDown(Keys.DOWN)) {
            player.move();
        }
        if (KeyboardHandler.isDown(Keys.LEFT)) {
            player.move();
        }
        if (KeyboardHandler.isDown(Keys.RIGHT)) {
            player.move();
        }
    }

    Player getPlayer() {
        return this.player;
    }

    boolean setPlayer(Player newObject) {
        this.player = newObject;
        return true;
    }

    boolean addDialogueQueueAt(int index, Dialogue a) {
        boolean contains = dialogueQueue.contains(a);
        if (contains) {
            return false;
        }
        dialogueQueue.add(index, a);
        return true;
    }

    boolean removeDialogueQueueAt(int index) {
        Dialogue removedElement = dialogueQueue.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    Dialogue getDialogueQueueAt(int index) {
        Dialogue associated = dialogueQueue.get(index);
        return associated;
    }

    boolean addDialogueQueue(Dialogue a) {
        boolean contains = dialogueQueue.contains(a);
        if (contains) {
            return false;
        }
        boolean added = dialogueQueue.add(a);
        return added;
    }

    boolean removeDialogueQueue(Dialogue a) {
        boolean removed = dialogueQueue.remove(a);
        return removed;
    }

    GameScene() {
        ArrayList<Dialogue> collection = new ArrayList<Dialogue>();
    }

    boolean containsDialogueQueue(Dialogue a) {
        boolean contains = dialogueQueue.contains(a);
        return contains;
    }

    int sizeOfDialogueQueue() {
        int size = dialogueQueue.size();
        return size;
    }

    ArrayList<MinuetoImage> getDialogueQueue() {
        return this.dialogueQueue;
    }

    boolean addLevelsAt(int index, LevelMap a) {
        boolean contains = levels.contains(a);
        if (contains) {
            return false;
        }
        levels.add(index, a);
        return true;
    }

    boolean removeLevelsAt(int index) {
        LevelMap removedElement = levels.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    LevelMap getLevelsAt(int index) {
        LevelMap associated = levels.get(index);
        return associated;
    }

    boolean addLevels(LevelMap a) {
        boolean contains = levels.contains(a);
        if (contains) {
            return false;
        }
        boolean added = levels.add(a);
        return added;
    }

    boolean removeLevels(LevelMap a) {
        boolean removed = levels.remove(a);
        return removed;
    }

    GameScene() {
        ArrayList<LevelMap> collection = new ArrayList<LevelMap>();
    }

    boolean containsLevels(LevelMap a) {
        boolean contains = levels.contains(a);
        return contains;
    }

    int sizeOfLevels() {
        int size = levels.size();
        return size;
    }

    ArrayList<MinuetoImage> getLevels() {
        return this.levels;
    }

    LevelMap getCurrentLevel() {
        return this.currentLevel;
    }

    boolean setCurrentLevel(LevelMap newObject) {
        this.currentLevel = newObject;
        return true;
    }

    public void constructLevels() {
        /* TODO: No message view defined */
    }
}
