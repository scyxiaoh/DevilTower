package scene;

// Start of user code for imports
import java.util.*;

import org.minueto.MinuetoColor;
import org.minueto.image.*;
import org.minueto.window.MinuetoWindow;
// End of user code

import interactive.KeyboardHandler;
import interactive.Keys;

/**
 * TitleScene class definition.
 * Generated by the TouchCORE code generator.
 */
public class TitleScene extends Scene {
    
    protected int currentOption;
    protected int alpha;
    protected int ticks;
    protected boolean introDone;
    protected MinuetoImage logo;
    protected MinuetoImage bg;
    protected MinuetoImage pointer;
    protected ArrayList<MinuetoImage> options;
    
    public TitleScene() {
    	this.options = new ArrayList<MinuetoImage>();
        this.introDone = false;
        this.ticks = 0;
    }

    MinuetoImage getLogo() {
        return this.logo;
    }

    boolean setLogo(MinuetoImage newObject) {
        this.logo = newObject;
        return true;
    }

    public void update() {
        handleInput();
        if (introDone) {
            
        } else {
            this.ticks = ticks + 1;
            if (ticks < 60) {
                this.alpha = (int)(255 - 255 * (1.0 * ticks / 60));
                if (alpha < 0) {
                    this.alpha = 0;
                }
            }
            if (ticks > 60 + 60) {
                this.alpha = (int) (255 * (1.0 * ticks - 60 - 60) / 60);
                if (alpha > 255) {
                    this.alpha = 255;
                }
            }
            if (ticks > 60 + 60 + 60) {
                this.introDone = true;
            }
        }
    }

    public void init() {
        /* TODO: No message view defined */
    }

    public void draw(MinuetoWindow w) {
        if (!introDone) {
            MinuetoColor white = new MinuetoColor(0, 0, 0);
            w.clear(white);
            w.draw(this.logo, 0, 0);
            MinuetoColor transparency = new MinuetoColor(0, 0, 0, this.alpha);
            MinuetoRectangle transparentMask = new MinuetoRectangle(672, 480, transparency, true);
            w.draw(transparentMask, 0, 0);
        } else {
            w.draw(this.bg, 0, 0);
            MinuetoImage toDraw = getOptionsAt(0);
            w.draw(toDraw, 44, 90);
            toDraw = getOptionsAt(1);
            w.draw(toDraw, 48, 100);
            if (currentOption == 0) {
                w.draw(this.pointer, 25, 86);
            } else if (currentOption == 1) {
                w.draw(this.pointer, 25, 96);
            }
        }
    }

    public void handleInput() {
        if (introDone) {
            if (KeyboardHandler.isPressed(Keys.DOWN) && currentOption < options.size() - 1) {
                this.currentOption = currentOption + 1;
            }
            if (KeyboardHandler.isPressed(Keys.UP) && currentOption > 0) {
                this.currentOption = currentOption - 1;
            }
            if (KeyboardHandler.isPressed(Keys.ENTER)) {
                selectOption();
            }
        }
    }

    MinuetoImage getBg() {
        return this.bg;
    }

    boolean setBg(MinuetoImage newObject) {
        this.bg = newObject;
        return true;
    }

    MinuetoImage getPointer() {
        return this.pointer;
    }

    boolean setPointer(MinuetoImage newObject) {
        this.pointer = newObject;
        return true;
    }

    protected boolean addSimpleOptions(int index, MinuetoImage a) {
        /* TODO: No message view defined */
        return false;
    }

    boolean addOptions(MinuetoImage a) {
    	int maximum = 4;
        int size = options.size();
        if (size == maximum) {
            return false;
        }
        boolean added = options.add(a);
        return added;
    }

    boolean addOptionsAt(int index, MinuetoImage a) {
    	int maximum = 4;
        int size = options.size();
        if (size == maximum) {
            return false;
        }
        options.add(index, a);
        return true;
    }

    boolean removeOptionsAt(int index) {
    	int minimum = 0;
        int size = options.size();
        if (size == minimum) {
            return false;
        }
        MinuetoImage removedElement = options.remove(index);
        boolean result = removedElement != null;
        return result;
    }

    MinuetoImage getOptionsAt(int index) {
        MinuetoImage associated = options.get(index);
        return associated;
    }

    boolean removeOptions(MinuetoImage a) {
    	int minimum = 0;
        int size = options.size();
        if (size == minimum) {
            return false;
        }
        boolean removed = options.remove(a);
        return removed;
    }

    protected boolean addSimpleOptions(MinuetoImage a) {
        /* TODO: No message view defined */
        return false;
    }

    protected boolean removeSimpleOptions(MinuetoImage a) {
        /* TODO: No message view defined */
        return false;
    }


    boolean containsOptions(MinuetoImage a) {
        boolean contains = options.contains(a);
        return contains;
    }

    int sizeOfOptions() {
        int size = options.size();
        return size;
    }

    ArrayList<MinuetoImage> getOptions() {
        return this.options;
    }

    public void selectOption() {
        if (currentOption == 0) {
            GameScene newScene = new GameScene();
            SceneManager sM = SceneManager.getInstance();
            sM.setScene(newScene);
        } else if (currentOption == 1) {
            System.exit(0);
        }
    }
}
