package map;

// Start of user code for imports
import java.util.*;
import org.minueto.image.MinuetoImage;
import org.minueto.window.MinuetoWindow;
// End of user code

import entity.Animation;
import entity.Entity;

/**
 * LevelMap class definition.
 * Generated by the TouchCORE code generator.
 */
public class LevelMap {
    
    protected int size;
    protected int level;
    protected int camX;
    protected int camY;
    protected int camDestX;
    protected int camDestY;
    protected int speed;
    protected Tile[][] tiles;
    protected int xmin;
    protected int ymin;
    protected int xmax;
    protected int ymax;
    protected boolean moving;
    protected RandomMapGenerator rmg;
    protected Pathfinding pathfinding;
    
    public LevelMap(int s, int l) {
        this.size = s;
        this.level = l;
        this.tiles = new Tile[size][size];
        this.xmin = 0;
        this.ymin = 0;
        this.xmax = (size - 21) * 32;
        this.ymax = (size - 14) * 32;
    }

    public void setTile(int x, int y, Tile t) {
        tiles[x][y] = t;
    }

    public Tile getTile(int x, int y) {
        Tile tile = tiles[x][y];
        return tiles[x][y];
        return tile;
    }

    public void update() {
        if (camX < camDestX) {
            this.camX = camX + speed;
            if (camX > camDestX) {
                this.camX = camDestX;
            }
        }
        if (camX > camDestX) {
            this.camX = camX - speed;
            if (camX < camDestX) {
                this.camX = camDestX;
            }
        }
        if (camY < camDestY) {
            this.camY = camY + speed;
            if (camY > camDestY) {
                this.camY = camDestY;
            }
        }
        if (camY > camDestY) {
            this.camY = camY - speed;
            if (camY < camDestY) {
                this.camY = camYDest;
            }
        }
        fixBounds();
        if (camX != camDestX ||camY != camDestY) {
            this.moving = true;
        } else {
            this.moving = false;
        }
    }

    public void draw(MinuetoWindow w) {
        int numRowsToDraw = 15;
        int numColsToDraw = 22;
        int colOffset = Math.floor(camX / 32);
        int rowOffset = Math.floor(camY/32);
        int camAdjustX = camX - colOffset * 32;
        int camAdjustY = camY - rowOffset * 32;
        for (int row = rowOffset; row < rowOffset + numRowsToDraw; row++) {
            if (row >= size) {
                break;
            }
            for (int col = colOffset; col < colOffset + numColsToDraw; col++) {
                if (col >= size) {
                    break;
                }
                Tile tile = getTile(row, col);
                MinuetoImage sprite = tile.getSprite();
                int drawX = col * 32 - camX - camAdjustX;
                int drawY = row * 32 - camY - camAdjustY;
                w.draw(sprite, this.camX, this.camY);
                Entity entity = tile.getMyEntity();
                if (entity != null) {
                    Animation animation = entity.getAnimation();
                    MinuetoImage currentFrame = animation.getCurrentFrame();
                    w.draw(currentFrame, drawX, drawY);
                    entity.update();
                }
            }
        }
    }

    public void fixBounds() {
        if (x < xmin) {
            this.camX = xmin;
        }
        if (y < ymin) {
            this.camY = ymin;
        }
        if (x > xmax) {
            this.camX = xmax;
        }
        if (y > ymax) {
            this.camY = ymax;
        }
    }

    RandomMapGenerator getRmg() {
        return this.rmg;
    }

    boolean setRmg(RandomMapGenerator newObject) {
        this.rmg = newObject;
        return true;
    }

    Pathfinding getPathfinding() {
        return this.pathfinding;
    }

    boolean setPathfinding(Pathfinding newObject) {
        this.pathfinding = newObject;
        return true;
    }
}
